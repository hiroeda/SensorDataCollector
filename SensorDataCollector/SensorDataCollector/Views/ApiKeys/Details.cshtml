@model IEnumerable<SensorDataCollector.Models.SensorData>
@using SensorDataCollector.Util;

@{
    // 表示範囲(時間)
    const int DispHours = 2;

    // X軸の表示間隔(分)
    const int DispInterval = 5;

    ViewBag.Title = "計測状況";
}

<h2>@ViewBag.Title</h2>


<canvas id="myChart"></canvas>

<div>
    <h4>最近の温湿度</h4>
    <hr />
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Temp)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Humid)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model.Take(5))
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Temp)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Humid)
                </td>
            </tr>
        }

    </table>
</div>
<p>
    @Html.ActionLink("戻る", "Index")
</p>

@section Scripts {
    @{ 
        const string XAxisFormat = "MM/dd HH:mm";
        var latestDate = DateTime.Now;

        // 表示すべき最後の日時を作成
        var latestMinute = (int)MathUtil.MultipleCeil(latestDate.Minute, DispInterval);
        latestDate = latestDate.AddMinutes(latestMinute - latestDate.Minute);

        // 横軸目盛りを現在時刻からDispHours時間分作成
        var endDate = new DateTime(latestDate.Year, latestDate.Month, latestDate.Day, latestDate.Hour, latestDate.Minute, 0);

        var labelList = new List<string>();
        for (var dateX = latestDate.AddHours(-DispHours); dateX <= endDate; dateX = dateX.AddMinutes(DispInterval))
        {
            labelList.Add(dateX.ToString(XAxisFormat));
        }

        // 縦軸データを横軸に合わせて作成
        var tempList = new List<string>();
        var humidList = new List<string>();
        foreach (var dateStr in labelList)
        {
            var target = Model.FirstOrDefault(d => dateStr == d.Date.ToString(XAxisFormat));
            if (target == null) {
                tempList.Add(null);
                humidList.Add(null);
            }
            else
            {
                tempList.Add(target.Temp.ToString());
                humidList.Add(target.Humid.ToString());
            }
        }

        // 目盛りの作成
        var labels = "['" + string.Join("','", labelList) + "']";
        var temps = "[" + string.Join(",", tempList) + "]";
        var humids = "[" + string.Join(",", humidList) + "]";
    }
    <script>
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
          type: 'line',
            data: {
                labels: @Html.Raw(labels),
                datasets: [{
                    label: '温度',
                    fill: false,
                    data: @Html.Raw(@temps),
                    borderColor: "rgba(153,255,51,0.3)",
                    backgroundColor: "rgba(153,255,51,0.4)"
                }, {
                    label: '湿度',
                    fill: false,
                    data: @Html.Raw(@humids),
                    borderColor: "rgba(255,153,0,0.3)",
                    backgroundColor: "rgba(255,153,0,0.4)"
                }],
                options: {
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'minute',
                            },
                            distribution: 'series'
                        }]
                    }
                }
            }
});
    </script>
}